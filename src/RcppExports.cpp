// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "magick_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// magick_attr_animationdelay
Rcpp::IntegerVector magick_attr_animationdelay(XPtrImage input, Rcpp::IntegerVector delay);
RcppExport SEXP magick_magick_attr_animationdelay(SEXP inputSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_animationdelay(input, delay));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_backgroundcolor
Rcpp::CharacterVector magick_attr_backgroundcolor(XPtrImage input, Rcpp::CharacterVector color);
RcppExport SEXP magick_magick_attr_backgroundcolor(SEXP inputSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_backgroundcolor(input, color));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_boxcolor
Rcpp::CharacterVector magick_attr_boxcolor(XPtrImage input, Rcpp::CharacterVector color);
RcppExport SEXP magick_magick_attr_boxcolor(SEXP inputSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_boxcolor(input, color));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_fillcolor
Rcpp::CharacterVector magick_attr_fillcolor(XPtrImage input, Rcpp::CharacterVector color);
RcppExport SEXP magick_magick_attr_fillcolor(SEXP inputSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_fillcolor(input, color));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_font
Rcpp::CharacterVector magick_attr_font(XPtrImage input, Rcpp::CharacterVector font);
RcppExport SEXP magick_magick_attr_font(SEXP inputSEXP, SEXP fontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type font(fontSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_font(input, font));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_fontsize
Rcpp::IntegerVector magick_attr_fontsize(XPtrImage input, Rcpp::IntegerVector pointsize);
RcppExport SEXP magick_magick_attr_fontsize(SEXP inputSEXP, SEXP pointsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pointsize(pointsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_fontsize(input, pointsize));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_label
Rcpp::CharacterVector magick_attr_label(XPtrImage input, Rcpp::CharacterVector label);
RcppExport SEXP magick_magick_attr_label(SEXP inputSEXP, SEXP labelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type label(labelSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_label(input, label));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_format
Rcpp::CharacterVector magick_attr_format(XPtrImage input, Rcpp::CharacterVector format);
RcppExport SEXP magick_magick_attr_format(SEXP inputSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_format(input, format));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_quality
Rcpp::IntegerVector magick_attr_quality(XPtrImage input, Rcpp::IntegerVector quality);
RcppExport SEXP magick_magick_attr_quality(SEXP inputSEXP, SEXP qualitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type quality(qualitySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_quality(input, quality));
    return rcpp_result_gen;
END_RCPP
}
// magick_attr_quantize
Rcpp::IntegerVector magick_attr_quantize(XPtrImage input, Rcpp::IntegerVector numcolors);
RcppExport SEXP magick_magick_attr_quantize(SEXP inputSEXP, SEXP numcolorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type numcolors(numcolorsSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_attr_quantize(input, numcolors));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_info
Rcpp::DataFrame magick_image_info(XPtrImage input);
RcppExport SEXP magick_magick_image_info(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_info(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_as_raster
Rcpp::CharacterVector magick_image_as_raster(Rcpp::RawVector data);
RcppExport SEXP magick_magick_image_as_raster(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_as_raster(data));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_length
int magick_image_length(XPtrImage image);
RcppExport SEXP magick_magick_image_length(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_length(image));
    return rcpp_result_gen;
END_RCPP
}
// create
XPtrImage create(int len);
RcppExport SEXP magick_create(SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(create(len));
    return rcpp_result_gen;
END_RCPP
}
// copy
XPtrImage copy(XPtrImage image);
RcppExport SEXP magick_copy(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(copy(image));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_rev
XPtrImage magick_image_rev(XPtrImage input);
RcppExport SEXP magick_magick_image_rev(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_rev(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_join
XPtrImage magick_image_join(Rcpp::List input);
RcppExport SEXP magick_magick_image_join(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_join(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_subset
XPtrImage magick_image_subset(XPtrImage image, Rcpp::IntegerVector index);
RcppExport SEXP magick_magick_image_subset(SEXP imageSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_subset(image, index));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_replace
XPtrImage magick_image_replace(XPtrImage image, Rcpp::IntegerVector index, XPtrImage value);
RcppExport SEXP magick_magick_image_replace(SEXP imageSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< XPtrImage >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_replace(image, index, value));
    return rcpp_result_gen;
END_RCPP
}
// autobrewed
bool autobrewed();
RcppExport SEXP magick_autobrewed() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(autobrewed());
    return rcpp_result_gen;
END_RCPP
}
// magick_coder_info
Rcpp::List magick_coder_info(Rcpp::String format);
RcppExport SEXP magick_magick_coder_info(SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_coder_info(format));
    return rcpp_result_gen;
END_RCPP
}
// magick_config_internal
Rcpp::List magick_config_internal();
RcppExport SEXP magick_magick_config_internal() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(magick_config_internal());
    return rcpp_result_gen;
END_RCPP
}
// magick_image_readbitmap_raw
XPtrImage magick_image_readbitmap_raw(Rcpp::RawVector x);
RcppExport SEXP magick_magick_image_readbitmap_raw(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_readbitmap_raw(x));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_readbitmap_double
XPtrImage magick_image_readbitmap_double(Rcpp::NumericVector x);
RcppExport SEXP magick_magick_image_readbitmap_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_readbitmap_double(x));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_readbin
XPtrImage magick_image_readbin(Rcpp::RawVector x, Rcpp::CharacterVector density, Rcpp::IntegerVector depth);
RcppExport SEXP magick_magick_image_readbin(SEXP xSEXP, SEXP densitySEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type density(densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_readbin(x, density, depth));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_readpath
XPtrImage magick_image_readpath(Rcpp::CharacterVector paths, Rcpp::CharacterVector density, Rcpp::IntegerVector depth);
RcppExport SEXP magick_magick_image_readpath(SEXP pathsSEXP, SEXP densitySEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type paths(pathsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type density(densitySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_readpath(paths, density, depth));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_read_list
XPtrImage magick_image_read_list(Rcpp::List list);
RcppExport SEXP magick_magick_image_read_list(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_read_list(list));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_write
Rcpp::RawVector magick_image_write(XPtrImage input, Rcpp::CharacterVector format, Rcpp::IntegerVector quality);
RcppExport SEXP magick_magick_image_write(SEXP inputSEXP, SEXP formatSEXP, SEXP qualitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type format(formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type quality(qualitySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_write(input, format, quality));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_write_frame
Rcpp::RawVector magick_image_write_frame(XPtrImage input, const char * format);
RcppExport SEXP magick_magick_image_write_frame(SEXP inputSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_write_frame(input, format));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_display
XPtrImage magick_image_display(XPtrImage image, bool animate);
RcppExport SEXP magick_magick_image_display(SEXP imageSEXP, SEXP animateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< bool >::type animate(animateSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_display(image, animate));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_append
XPtrImage magick_image_append(XPtrImage image, bool stack);
RcppExport SEXP magick_magick_image_append(SEXP imageSEXP, SEXP stackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< bool >::type stack(stackSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_append(image, stack));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_average
XPtrImage magick_image_average(XPtrImage image);
RcppExport SEXP magick_magick_image_average(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_average(image));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_coalesce
XPtrImage magick_image_coalesce(XPtrImage image);
RcppExport SEXP magick_magick_image_coalesce(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_coalesce(image));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_flatten
XPtrImage magick_image_flatten(XPtrImage input, Rcpp::CharacterVector composite);
RcppExport SEXP magick_magick_image_flatten(SEXP inputSEXP, SEXP compositeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type composite(compositeSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_flatten(input, composite));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_fft
XPtrImage magick_image_fft(XPtrImage image);
RcppExport SEXP magick_magick_image_fft(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_fft(image));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_map
XPtrImage magick_image_map(XPtrImage input, XPtrImage map_image, bool dither);
RcppExport SEXP magick_magick_image_map(SEXP inputSEXP, SEXP map_imageSEXP, SEXP ditherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrImage >::type map_image(map_imageSEXP);
    Rcpp::traits::input_parameter< bool >::type dither(ditherSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_map(input, map_image, dither));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_montage
XPtrImage magick_image_montage(XPtrImage image);
RcppExport SEXP magick_magick_image_montage(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_montage(image));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_morph
XPtrImage magick_image_morph(XPtrImage image, int frames);
RcppExport SEXP magick_magick_image_morph(SEXP imageSEXP, SEXP framesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< int >::type frames(framesSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_morph(image, frames));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_mosaic
XPtrImage magick_image_mosaic(XPtrImage input, Rcpp::CharacterVector composite);
RcppExport SEXP magick_magick_image_mosaic(SEXP inputSEXP, SEXP compositeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type composite(compositeSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_mosaic(input, composite));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_animate
XPtrImage magick_image_animate(XPtrImage input, size_t delay, size_t iter, const char * method);
RcppExport SEXP magick_magick_image_animate(SEXP inputSEXP, SEXP delaySEXP, SEXP iterSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< size_t >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const char * >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_animate(input, delay, iter, method));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_noise
XPtrImage magick_image_noise(XPtrImage input, const char * noisetype);
RcppExport SEXP magick_magick_image_noise(SEXP inputSEXP, SEXP noisetypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type noisetype(noisetypeSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_noise(input, noisetype));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_blur
XPtrImage magick_image_blur(XPtrImage input, const double radius, const double sigma);
RcppExport SEXP magick_magick_image_blur(SEXP inputSEXP, SEXP radiusSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_blur(input, radius, sigma));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_charcoal
XPtrImage magick_image_charcoal(XPtrImage input, const double radius, const double sigma);
RcppExport SEXP magick_magick_image_charcoal(SEXP inputSEXP, SEXP radiusSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_charcoal(input, radius, sigma));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_chop
XPtrImage magick_image_chop(XPtrImage input, const char * geometry);
RcppExport SEXP magick_magick_image_chop(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_chop(input, geometry));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_colorize
XPtrImage magick_image_colorize(XPtrImage input, const size_t opacity, const char * color);
RcppExport SEXP magick_magick_image_colorize(SEXP inputSEXP, SEXP opacitySEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const size_t >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< const char * >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_colorize(input, opacity, color));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_edge
XPtrImage magick_image_edge(XPtrImage input, size_t radius);
RcppExport SEXP magick_magick_image_edge(SEXP inputSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_edge(input, radius));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_emboss
XPtrImage magick_image_emboss(XPtrImage input, const double radius, const double sigma);
RcppExport SEXP magick_magick_image_emboss(SEXP inputSEXP, SEXP radiusSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_emboss(input, radius, sigma));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_enhance
XPtrImage magick_image_enhance(XPtrImage input);
RcppExport SEXP magick_magick_image_enhance(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_enhance(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_equalize
XPtrImage magick_image_equalize(XPtrImage input);
RcppExport SEXP magick_magick_image_equalize(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_equalize(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_flip
XPtrImage magick_image_flip(XPtrImage input);
RcppExport SEXP magick_magick_image_flip(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_flip(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_flop
XPtrImage magick_image_flop(XPtrImage input);
RcppExport SEXP magick_magick_image_flop(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_flop(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_fill
XPtrImage magick_image_fill(XPtrImage input, const char * color, const char * point, double fuzz);
RcppExport SEXP magick_magick_image_fill(SEXP inputSEXP, SEXP colorSEXP, SEXP pointSEXP, SEXP fuzzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type color(colorSEXP);
    Rcpp::traits::input_parameter< const char * >::type point(pointSEXP);
    Rcpp::traits::input_parameter< double >::type fuzz(fuzzSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_fill(input, color, point, fuzz));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_transparent
XPtrImage magick_image_transparent(XPtrImage input, const char * color, double fuzz);
RcppExport SEXP magick_magick_image_transparent(SEXP inputSEXP, SEXP colorSEXP, SEXP fuzzSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type color(colorSEXP);
    Rcpp::traits::input_parameter< double >::type fuzz(fuzzSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_transparent(input, color, fuzz));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_frame
XPtrImage magick_image_frame(XPtrImage input, const char * geometry);
RcppExport SEXP magick_magick_image_frame(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_frame(input, geometry));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_negate
XPtrImage magick_image_negate(XPtrImage input);
RcppExport SEXP magick_magick_image_negate(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_negate(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_normalize
XPtrImage magick_image_normalize(XPtrImage input);
RcppExport SEXP magick_magick_image_normalize(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_normalize(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_oilpaint
XPtrImage magick_image_oilpaint(XPtrImage input, size_t radius);
RcppExport SEXP magick_magick_image_oilpaint(SEXP inputSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_oilpaint(input, radius));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_rotate
XPtrImage magick_image_rotate(XPtrImage input, double degrees);
RcppExport SEXP magick_magick_image_rotate(SEXP inputSEXP, SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type degrees(degreesSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_rotate(input, degrees));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_implode
XPtrImage magick_image_implode(XPtrImage input, double factor);
RcppExport SEXP magick_magick_image_implode(SEXP inputSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_implode(input, factor));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_format
XPtrImage magick_image_format(XPtrImage input, const char * format, Rcpp::IntegerVector depth);
RcppExport SEXP magick_magick_image_format(SEXP inputSEXP, SEXP formatSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type format(formatSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_format(input, format, depth));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_trim
XPtrImage magick_image_trim(XPtrImage input);
RcppExport SEXP magick_magick_image_trim(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_trim(input));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_composite
XPtrImage magick_image_composite(XPtrImage input, XPtrImage composite_image, const char * offset, const char * composite);
RcppExport SEXP magick_magick_image_composite(SEXP inputSEXP, SEXP composite_imageSEXP, SEXP offsetSEXP, SEXP compositeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrImage >::type composite_image(composite_imageSEXP);
    Rcpp::traits::input_parameter< const char * >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const char * >::type composite(compositeSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_composite(input, composite_image, offset, composite));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_contrast
XPtrImage magick_image_contrast(XPtrImage input, size_t sharpen);
RcppExport SEXP magick_magick_image_contrast(SEXP inputSEXP, SEXP sharpenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type sharpen(sharpenSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_contrast(input, sharpen));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_background
XPtrImage magick_image_background(XPtrImage input, const char * color);
RcppExport SEXP magick_magick_image_background(SEXP inputSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_background(input, color));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_page
XPtrImage magick_image_page(XPtrImage input, Rcpp::CharacterVector pagesize, Rcpp::CharacterVector density);
RcppExport SEXP magick_magick_image_page(SEXP inputSEXP, SEXP pagesizeSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type pagesize(pagesizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_page(input, pagesize, density));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_crop
XPtrImage magick_image_crop(XPtrImage input, const char * geometry);
RcppExport SEXP magick_magick_image_crop(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_crop(input, geometry));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_scale
XPtrImage magick_image_scale(XPtrImage input, const char * geometry);
RcppExport SEXP magick_magick_image_scale(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_scale(input, geometry));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_sample
XPtrImage magick_image_sample(XPtrImage input, const char * geometry);
RcppExport SEXP magick_magick_image_sample(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_sample(input, geometry));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_border
XPtrImage magick_image_border(XPtrImage input, const char * color, const char * geometry);
RcppExport SEXP magick_magick_image_border(SEXP inputSEXP, SEXP colorSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const char * >::type color(colorSEXP);
    Rcpp::traits::input_parameter< const char * >::type geometry(geometrySEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_border(input, color, geometry));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_annotate
XPtrImage magick_image_annotate(XPtrImage input, const std::string text, const char * gravity, const char * location, double degrees, Rcpp::IntegerVector size, Rcpp::CharacterVector font, Rcpp::CharacterVector color, Rcpp::CharacterVector strokecolor, Rcpp::CharacterVector boxcolor);
RcppExport SEXP magick_magick_image_annotate(SEXP inputSEXP, SEXP textSEXP, SEXP gravitySEXP, SEXP locationSEXP, SEXP degreesSEXP, SEXP sizeSEXP, SEXP fontSEXP, SEXP colorSEXP, SEXP strokecolorSEXP, SEXP boxcolorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type text(textSEXP);
    Rcpp::traits::input_parameter< const char * >::type gravity(gravitySEXP);
    Rcpp::traits::input_parameter< const char * >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type degrees(degreesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type font(fontSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type strokecolor(strokecolorSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type boxcolor(boxcolorSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_annotate(input, text, gravity, location, degrees, size, font, color, strokecolor, boxcolor));
    return rcpp_result_gen;
END_RCPP
}
// magick_image_compare
double magick_image_compare(XPtrImage input, XPtrImage reference_image, const char  * metric);
RcppExport SEXP magick_magick_image_compare(SEXP inputSEXP, SEXP reference_imageSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrImage >::type reference_image(reference_imageSEXP);
    Rcpp::traits::input_parameter< const char  * >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(magick_image_compare(input, reference_image, metric));
    return rcpp_result_gen;
END_RCPP
}
