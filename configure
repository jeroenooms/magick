#!/bin/bash
# Anticonf script by Jeroen Ooms (2017)
# The script will try 'Magick++-config' and 'pkg-config' to find required
# cflags and ldflags. Make sure this executable is in PATH when installing
# the package. Alternatively, you can set INCLUDE_DIR and LIB_DIR manually:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

# Library settings
PKG_CONFIG_NAME="Magick++"
PKG_DEB_NAME="libmagick++-dev"
PKG_RPM_NAME="ImageMagick-c++-devel"
PKG_CSW_NAME="imagemagick_dev"
PKG_BREW_NAME="imagemagick"
PKG_TEST_HEADER="<Magick++.h>"
PKG_LIBS="-lMagick++-6.Q16"

# Use Magick++-config (on Solaris /opt/csw/bin must be in PATH)
if [ $(command -v pkg-config) ]; then
  PKGCONFIG_CFLAGS=$(pkg-config --cflags --silence-errors ${PKG_CONFIG_NAME})
  PKGCONFIG_LIBS=$(pkg-config --libs ${PKG_CONFIG_NAME})
elif [ $(command -v Magick++-config) ]; then
  PKGCONFIG_CFLAGS=$(Magick++-config --cflags)
  PKGCONFIG_LIBS=$(Magick++-config --libs)
fi

# Pick up on GraphicsMagick but warn against it
if [ -z "$PKGCONFIG_LIBS" ] && [ $(command -v GraphicsMagick++-config) ]; then
  echo "Warning: found GraphicsMagick++ instead of ImageMagick++. GraphicsMagick is not supported."
fi

# Hack for CRAN server
if [ -e "/Builds/CRAN-QA-Simon" ] || [ -e "/Volumes/SSD-Data/Builds" ]; then
  unset PKGCONFIG_CFLAGS
  unset PKGCONFIG_LIBS
fi

# Note that cflags may be empty in case of success
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
elif [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
  echo "Found pkg-config cflags and libs!"
  PKG_CFLAGS=${PKGCONFIG_CFLAGS}
  PKG_LIBS=${PKGCONFIG_LIBS}
elif [[ "$OSTYPE" == "darwin"* ]]; then
  if [ $(command -v brew) ]; then
    BREWDIR=$(brew --prefix)
    INCLUDE_DIR="$BREWDIR/opt/imagemagick@6/include/ImageMagick-6"
    PKG_CFLAGS="-I$INCLUDE_DIR -DMAGICKCORE_QUANTUM_DEPTH=16 -DMAGICKCORE_HDRI_ENABLE=0"
    PKG_LIBS="-L$BREWDIR/opt/imagemagick@6/lib -lMagick++-6.Q16"
  else
    curl -sfL "https://jeroen.github.io/autobrew/$PKG_BREW_NAME" > autobrew
    source autobrew
  fi
fi

# Find compiler
CXXCPP=$(${R_HOME}/bin/R CMD config CXXCPP)
CXXFLAGS=$(${R_HOME}/bin/R CMD config CXXFLAGS)
CPPFLAGS=$(${R_HOME}/bin/R CMD config CPPFLAGS)

# For debugging
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"

# Test configuration
echo "#include $PKG_TEST_HEADER" | ${CXXCPP} ${CPPFLAGS} ${PKG_CFLAGS} ${CXXFLAGS} -xc++ - >/dev/null 2>&1

# Customize the error
if [ $? -ne 0 ]; then
  echo "------------------------- ANTICONF ERROR ---------------------------"
  echo "Configuration failed because $PKG_CONFIG_NAME was not found. Try installing:"
  echo " - deb: '$PKG_DEB_NAME' (Debian, Ubuntu)"
  echo " - rpm: '$PKG_RPM_NAME' (Fedora, CentOS, RHEL)"
  echo " - csw: '$PKG_CSW_NAME' (Solaris)"
  echo "On MacOS it is recommended to use install ImageMagick-6 from homebrew"
  echo "with extra support for fontconfig and rsvg rendering:"
  echo "   brew reinstall imagemagick@6 --with-fontconfig --with-librsvg"
  echo "For older Ubuntu versions Trusty (14.04) and Xenial (16.04) use our PPA:"
  echo "   sudo add-apt-repository -y ppa:opencpu/imagemagick"
  echo "   sudo apt-get update"
  echo "   sudo apt-get install -y libmagick++-dev"
  echo "If $PKG_CONFIG_NAME is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains a $PKG_CONFIG_NAME.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "--------------------------------------------------------------------"
  exit 1;
fi

# Write to Makevars
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/Makevars.in > src/Makevars

# Success
touch inst/doc/intro.html || true
exit 0
